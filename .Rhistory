step_rm(Id) |>
step_mutate('Open Date' = as.factor(Open Date))
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate('Open Date' = as.factor(Open Date))
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate('Open Date' = as.factor('Open Date'))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train$`Open Date`
train$`Open Date` |> unique()
library(vroom)
library(tidymodels)
train = vroom("train.csv")
train
test = vroom("test.csv")
test
train
train$`Open Date`
train$`Open Date` |> unique()
train$`Open Date` |> unique() |> length()
train
train$Id
train$Id |> unique() |> length()
train
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_date('Open Date', features = "month")
prepped_recipe = prep(my_recipe)
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate('Open Date' = as.Date('Open Date', format = "%m/%d/%Y")) |>
step_date('Open Date', features = "month")
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate('Open Date' = as.Date('Open Date', format = "%m/%d/%Y"))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`, format = "%m/%d/%Y"))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
my_recipe = recipe(revenue ~ ., train) |>
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`))
prepped_recipe = prep(my_recipe)
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`))
prepped_recipe = prep(my_recipe)
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`, format = "%m/%d/%Y"))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(`Open Date` = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(`Open Date`, features = "month")
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked[`Open Date_month`]
baked[`Open Date_month`,]
baked$`Open Date_month`
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(Open_Date = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = "month")
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(Open_Date = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = "month")
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked[1:,]
baked[1:3, :]
baked[1, 3]
baked[1:5, 3]
baked[1:5, 3:7]
baked[1:5, :]
baked[1:5, ]
?step_date
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(Open_Date = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow"))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rm(Id) |>
step_mutate(Open_Date = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
my_recipe = recipe(revenue ~ ., train) |>
step_mutate(Open_Date = as.Date(`Open Date`, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, `Open Date`, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked$City
baked$City |> unique() |> length()
baked
?step_rename
my_recipe = recipe(revenue ~ ., train) |>
step_rename(`Open Date` = Open_Date)
prepped_recipe = prep(my_recipe)
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`)
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`)
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train)
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`)
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked$City_Group
baked$City_Group |> unique()
?step_relocate
baked[20:, ]
baked[20:, 1:5]
baked[20:,:]
baked[20:45,:]
baked[,20:45]
baked[,30:45]
baked[,35:45]
test
baked$P1 |> hist()
my_model = rand_forest(mtry = tune(),
trees = 500,
min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 9)),
min_n(),
levels = 5)
tuning_grid
tuning_grid = grid_regular(mtry(),
min_n(),
levels = 5)
tuning_grid = grid_regular(mtry(),
min_n(),
levels = 5)
tuning_grid = grid_regular(mtry(range = c(1, 9)),
min_n(),
levels = 5)
tuning_grid
baked
tuning_grid = grid_regular(mtry(range = c(1, 45)),
min_n(),
levels = 5)
tuning_grid
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
tuning_grid
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
train$City
train$City |> is.na()
train$City |> is.na() |> sum()
baked$City |> is.na() |> sum()
baked$City
baked
my_recipe = recipe(revenue ~ ., train) |>
step_mutate(City = stri_trans_general(City, "Latin-ASCII")) |>
step_mutate(City = tolower(City)) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
my_recipe = recipe(revenue ~ ., train) |>
step_mutate(City = iconv(City, from = "UTF-8", to = "ASCII//TRANSLIT")) |>
step_mutate(City = tolower(City)) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
my_model = rand_forest(mtry = tune(),
trees = 500,
min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
baked
baked |> group_by(City) |> size()
baked |> group_by(City) |> summarize(n())
baked |> group_by(City) |> summarize(n()) |> sort()
baked |> group_by(City) |> summarize(n()) |> arrange(n())
my_recipe = recipe(revenue ~ ., train) |>
step_mutate(City = iconv(City, from = "UTF-8", to = "ASCII//TRANSLIT")) |>
step_mutate(City = tolower(City)) |>
step_other(City, threshold = 0.05) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
my_recipe = recipe(revenue ~ ., train) |>
step_other(City, threshold = 0.05) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
?step_other
baked
train$Type
train$Type |> unique()
train |> group_by(Type) |> summarize(n())
?step_filter
my_recipe = recipe(revenue ~ ., train) |>
step_other(City, threshold = 0.05) |>
step_filter(Type != "DT") |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked$Type |> unique()
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked$Type |> unique()
levels(baked$Type)
levels(train$Type)
my_recipe = recipe(revenue ~ ., train) |>
step_other(City, threshold = 0.05) |>
step_filter(Type != "IL") |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
train_filtered = train |>
filter(Type != "DT")
train_filtered = train |>
filter(Type != "DT")
my_recipe = recipe(revenue ~ ., train_filtered) |>
step_other(City, threshold = 0.05) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train)
baked
baked = bake(prepped_recipe, new_data = train_filtered)
baked
baked$Type |> unique()
my_model = rand_forest(mtry = tune(),
trees = 500,
min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train_filtered, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
test
test$Type
test$Type |> unique()
train$Type
train$Type |> unique()
bestTune = CV_results |>
select_best()
bestTune = CV_results |>
select_best(metric = "rmse")
bestTune
library(vroom)
library(tidymodels)
train = vroom("train.csv")
train
train_filtered = train |>
filter(Type != "DT")
test = vroom("test.csv")
train_filtered
my_recipe = recipe(revenue ~ ., train_filtered) |>
step_other(City, threshold = 0.05) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_rm(c(Id, Open_Date))
prepped_recipe = prep(my_recipe)
baked = bake(prepped_recipe, new_data = train_filtered)
baked
train = vroom("train.csv")
test = vroom("test.csv")
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_other(all_nominal_predictors(), threshold = 0.05) |>
step_rm(c(Id, Open_Date))
my_model = rand_forest(mtry = tune(),
trees = 500,
min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
bestTune = CV_results |>
select_best(metric = "rmse")
final_wf = wf |>
finalize_workflow(bestTune) |>
fit(data = train)
preds = predict(final_wf, new_data = test)
preds
kaggle_submission = preds |>
bind_cols(test) |>
select(Id, .pred) |>
rename(Prediction=.pred)
kaggle_submission
vroom_write(x = kaggle_submission,
file = "./forestpreds.csv",
delim = ",")
train |> group_by(type) |> summarize(n())
train
train |> group_by(Type) |> summarize(n())
test |> group_by(Type) |> summarize(n())
train = vroom("train.csv")
test = vroom("test.csv")
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_other(all_nominal_predictors(), threshold = 0.05) |>
step_rm(c(Id, Open_Date))
my_model = rand_forest(mtry = tune(),
trees = 500,
min_n = tune()) |>
set_engine("ranger") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model)
tuning_grid = grid_regular(mtry(range = c(1, 44)),
min_n(),
levels = 5)
folds = vfold_cv(train, v = 10, repeats = 1)
CV_results = wf |>
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse),
control=control_grid(verbose=TRUE))
bestTune = CV_results |>
select_best(metric = "rmse")
final_wf = wf |>
finalize_workflow(bestTune) |>
fit(data = train)
preds = predict(final_wf, new_data = test)
kaggle_submission = preds |>
bind_cols(test) |>
select(Id, .pred) |>
rename(Prediction=.pred)
vroom_write(x = kaggle_submission,
file = "./forestpreds2.csv",
delim = ",")
train = vroom("train.csv")
library(vroom)
library(tidymodels)
train = vroom("train.csv")
test = vroom("test.csv")
my_recipe = recipe(revenue ~ ., train) |>
step_rename(Open_Date = `Open Date`, City_Group = `City Group`) |>
step_mutate(Open_Date = as.Date(Open_Date, format = "%m/%d/%Y")) |>
step_date(Open_Date, features = c("year", "month", "doy", "dow")) |>
step_other(all_nominal_predictors(), threshold = 0.05) |>
step_rm(c(Id, Open_Date))
my_model = bart(trees = 50) |>
set_engine("dbarts") |>
set_mode("regression")
wf = workflow() |>
add_recipe(my_recipe) |>
add_model(my_model) |>
fit(train)
preds = predict(wf, new_data = test)
kaggle_submission = preds |>
bind_cols(test) |>
select(Id, .pred) |>
rename(Prediction=.pred)
vroom_write(x = kaggle_submission,
file = "./bartpreds.csv",
delim = ",")
kaggle_submission
train = vroom("train.csv")
library(vroom)
train = vroom("train.csv")
test = vroom("test.csv")
